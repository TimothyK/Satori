@page "/PullRequests"

<PageTitle>Pull Requests</PageTitle>

<h3>Pull Requests</h3>

@if (pullRequests == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>PR#</th>
                <th>Repo</th>
                <th>Title</th>
                <th>Created By</th>
                <th>Reviews</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pullRequest in pullRequests)
            {
                <tr style="vertical-align:middle;">
                    <td><a href="@pullRequest.Url">@pullRequest.Id</a></td>
                    <td>
                        <span class="project">@pullRequest.Project/</span>
                        <br/>
                        @pullRequest.RepositoryName
                    </td>
                    <td><a href="@pullRequest.Url">@pullRequest.Title</a></td>
                    <td>
                        <div style="display: flex;">
                            <div style="align-self: center;">
                                <img src="@pullRequest.CreatedBy.AvatarUrl" width="24" height="24"
                                     alt="@pullRequest.CreatedBy.DisplayName"
                                     title="@pullRequest.CreatedBy.DisplayName" />
                            </div>
                            <div style="margin-left: 3px;">
                                <div>
                                    <span class="timestamp">
                                        @pullRequest.CreationDate.LocalDateTime.ToString("yyyy-MM-dd")
                                    </span>
                                </div>
                                @if (@pullRequest.Status == PullRequestStatus.Draft)
                                {
                                    <div style="margin-top: -10px;">
                                        <span class="badge bg-warning" style="font-size:0.5rem;">Draft</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>

                    <td>
                        <div class="avatar-row">
                            @foreach (var review in @pullRequest.Reviews)
                            {
                                <div class="avatar-cell">
                                    <img src="@review.Reviewer.AvatarUrl" width="24" height="24"
                                         alt="@review.Reviewer.DisplayName"
                                         title="@review.Reviewer.DisplayName"/>
                                    @if (review.Vote >= ReviewVote.ApprovedWithSuggestions)
                                    {
                                        <span class="vote vote-approved"></span>
                                    }
                                    @if (review.Vote is ReviewVote.WaitingForAuthor or ReviewVote.NoVote)
                                    {
                                        <span class="vote vote-wait"></span>
                                    }
                                    @if (review.Vote == ReviewVote.Rejected)
                                    {
                                        <span class="vote vote-rejected"></span>
                                    }
                                </div>
                            }
                        </div>
                        

                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private PullRequest[]? pullRequests;

    protected override async Task OnInitializedAsync()
    {
        var timothy = new Person() { Id = "MAYFIELD\\Timothyk", DisplayName = "Timothy Klenke", AvatarUrl = "https://devops.mayfield.pscl.com/PSDev/_api/_common/identityImage?id=c00ef764-dc77-4b32-9a19-590db59f039b" };
        var alex = new Person() { Id = "MAYFIELD\\AlexG", DisplayName = "Alex Garand", AvatarUrl = "https://devops.mayfield.pscl.com/PSDev/_api/_common/identityImage?id=443db5de-3fbc-4be4-a1f2-8b492923b657" };
        var jonathan = new Person() { Id = "MAYFIELD\\JonathanE", DisplayName = "Jonathan Ettie", AvatarUrl = "https://devops.mayfield.pscl.com/PSDev/_api/_common/identityImage?id=428991e1-02ed-4a09-8a96-17c777f25646" };
        var barbara = new Person() { Id = "MAYFIELD\\barbaray", DisplayName = "Barbara Yue Yang", AvatarUrl = "https://devops.mayfield.pscl.com/PSDev/_api/_common/identityImage?id=200dc4de-d4b4-4c44-a380-510d3e5d29c5" };


        pullRequests = new[]
        {
            new PullRequest
            {
                Id = 1010,
                Title = "Populate ShipToKey",
                RepositoryName = "DbScripts-Eagle",
                Project = "CD",
                Url = string.Format("https://devops.mayfield.pscl.com/PSDev/{0}/_git/{1}/pullrequest/{2}", "CD", "DbScripts-Eagle", 1010),
                Status = PullRequestStatus.Open,
                AutoComplete = true,
                CreationDate = new DateTimeOffset(2024,1,19, 23,26,41, TimeSpan.Zero),
                CreatedBy = timothy,
                Reviews = new List<Review>()
                {
                    new Review()
                    {
                        Id = new Guid("443db5de-3fbc-4be4-a1f2-8b492923b657"),IsRequired = true,Vote = ReviewVote.Rejected,
                        Reviewer = alex
                    },
                }
            },
            new PullRequest
            {
                Id = 1011,
                Title = "SFTP",
                RepositoryName = "StorageManager",
                Project = "Shared",
                Url = string.Format("https://devops.mayfield.pscl.com/PSDev/{0}/_git/{1}/pullrequest/{2}", "Shared", "StorageManager", 1011),
                Status = PullRequestStatus.Draft,
                AutoComplete = false,
                CreationDate = new DateTimeOffset(2024,1,21, 5,45,14, TimeSpan.Zero),
                CreatedBy = timothy,
                Reviews = new List<Review>()
            },
            new PullRequest
            {
                Id = 1009,
                Title = "D28773 - Instrument Import Require Addition Of Silo Destination",
                RepositoryName = "LDMS",
                Project = "CQ",
                Url = string.Format("https://devops.mayfield.pscl.com/PSDev/{0}/_git/{1}/pullrequest/{2}", "CQ", "LDMS", 1009),
                Status = PullRequestStatus.Open,
                AutoComplete = true,
                CreationDate = new DateTimeOffset(2024,1,19, 18,03,46, TimeSpan.Zero),
                CreatedBy = jonathan,
                Reviews = new List<Review>()
                {
                    new Review()
                    {
                        Id = new Guid("200dc4de-d4b4-4c44-a380-510d3e5d29c5"),IsRequired = true,Vote = ReviewVote.NoVote,
                        Reviewer = barbara
                    },
                    new Review()
                    {
                        Id = new Guid("c00ef764-dc77-4b32-9a19-590db59f039b"),IsRequired = true,Vote = ReviewVote.Approved,
                        Reviewer = timothy
                    },
                }
            },

        };
    }

    private enum PullRequestStatus
    {
        Draft,
        Open,
        Complete,
        Abandoned,
    }
    private class PullRequest
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string RepositoryName { get; set; }
        public string Project { get; set; }  // Project /repository/project/name  {CD, CQ, Shared}
        public string Url { get; set; }
        public PullRequestStatus Status { get; set; }
        public bool AutoComplete { get; set; }  //set if /completionOptions/mergeCommitMessage has a value
        public DateTimeOffset CreationDate { get; set; }
        public Person CreatedBy { get; set; }
        public List<Review> Reviews { get; set; }
        //TODO: Add WorkItems and Comments
    }

    private enum ReviewVote
    {
        Approved = 10,
        ApprovedWithSuggestions = 5,
        NoVote = 0,
        WaitingForAuthor = -5,
        Rejected = -10,
    }
    private class Review
    {
        public Guid Id { get; set; }
        public Person Reviewer { get; set; }
        public bool IsRequired { get; set; }
        public ReviewVote Vote { get; set; }
    }

    private class Person
    {
        public string Id { get; set; }
        public string DisplayName { get; set; }
        public string AvatarUrl { get; set; }
    }
}
