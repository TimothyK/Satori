@page "/SprintBoards"
@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels.Sprints
@using Satori.AppServices.ViewModels.WorkItems
@using Satori.Utilities
@using System.Web
@using CodeMonkeyProjectiles.Linq
@attribute [StreamRendering]

<PageTitle>Sprint Boards - Satori</PageTitle>

<div>
    
    <h3>Sprint Boards
        @if (_workItems != null)
        {
            <span class="badge bg-primary">@WorkItemActiveCount</span>
            <span class="badge bg-success">@WorkItemDoneCount</span>
        }
        <span style="float: right;">
            @if(_sprints != null)
            {
                <span class="team-selector avatar-row">
                    @foreach (var sprint in _sprints.OrderBy(x => x.TeamName))
                    {
                        <button id="@sprint.TeamId" class='avatar-cell @_selectedClassForTeam[sprint.TeamId]' @onclick='() => SelectTeam(sprint.TeamId)'>
                            <img src="@sprint.TeamAvatarUrl"
                                 alt="@sprint.TeamName"
                                 title="@sprint.TeamName @HttpUtility.HtmlEncode("\r") @sprint.Name @HttpUtility.HtmlEncode("\r") Finishes: @sprint.FinishTime.ToString("yyyy-MM-dd")" />
                        </button>
                    }
                </span>
            }
        </span>
    </h3>
    
</div>

@if (_sprints == null)
{
    <p><em>Loading Sprints...</em></p>
}
else
{
    if (_workItems == null)
    {
        <p><em>Loading Work Items...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>D#</th>
                    <th>Title</th>
                    <th>Tasks</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var workItem in _workItems.OrderBy(wi => wi.AbsolutePriority))
                {
                    <tr class="work-item-row @workItem.Type.CssClass @workItem.StatusCssClass @(workItem.Sprint == null ? string.Empty : _selectedClassForTeam[workItem.Sprint.TeamId])">
                        <td>
                            <div style="display: flex;">
                                @if (@workItem.Sprint != null)
                                {
                                    <div class="priority-block">
                                        <div class="avatar-cell">
                                            <img src="@workItem.Sprint.TeamAvatarUrl"
                                                 alt="@workItem.Sprint.TeamName"/>
                                        </div>
                                        <div class="priority-number">
                                            @workItem.SprintPriority
                                        </div>
                                    </div>
                                }
                                @if (@workItem.AssignedTo != null)
                                {
                                    <div class="avatar-cell">
                                        <img src="@workItem.AssignedTo.AvatarUrl"
                                             alt="@workItem.AssignedTo.DisplayName" />
                                    </div>
                                }
                            </div>
                            <div class="work-item-status">@workItem.StatusLabel</div>
                            @if (@workItem.Blocked)
                            {
                                <div class="blocked">🧱 Blocked</div>
                            }
                            @foreach (var tag in @workItem.Tags)
                            {
                                <div>
                                    <span class="badge bg-secondary work-item-status">@tag</span>
                                </div>
                            }
                        </td>
                        <td class="@workItem.StatusCssClass">
                            <a href="@workItem.Url">@workItem.Id</a>
                        </td>
                        <td class="@workItem.StatusCssClass">
                            <a href="@workItem.Url">@workItem.Title</a>
                        </td>
                        <td>
                            @foreach (var @task in workItem.Children.OrderByDescending(wi => wi.State).ThenBy(wi => wi.Id))
                            {
                                <div class="task-status @task.StatusCssClass" style="display: flex;">
                                    @if (@task.AssignedTo != null)
                                    {
                                        <div class="avatar-cell">
                                            <img src="@task.AssignedTo.AvatarUrl"
                                                 alt="@task.AssignedTo.DisplayName"
                                                 title="@task.AssignedTo.DisplayName" />
                                        </div>
                                    }
                                    <div>
                                        <a href="@task.Url">@task.Title</a>
                                    </div>
                                    <div>
                                        @task.StatusLabel
                                    </div>
                                    @if (@task.Blocked)
                                    {
                                        <div class="blocked">🧱 Blocked</div>
                                    }
                                    @foreach (var tag in @task.Tags)
                                    {
                                        <div>
                                            <span class="badge bg-secondary" style="font-size:0.5rem;">@tag</span>
                                        </div>
                                    }
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}


@code {
    private Sprint[]? _sprints;
    private WorkItem[]? _workItems;

    protected override async Task OnInitializedAsync()
    {
         var srv = Program.Services.GetRequiredService<SprintBoardService>();
         
         var sprints = (await srv.GetActiveSprintsAsync()).ToArray();
         _selectedClassForTeam = sprints.ToDictionary(sprint => sprint.TeamId, _ => _teamSelected);
         _sprints = sprints;

         _workItems = (await srv.GetWorkItemsAsync(sprints)).ToArray();
         ResetWorkItemCounts();
    }

    private Dictionary<Guid, CssClass> _selectedClassForTeam = new();

    private readonly CssClass _teamSelected = new("team-selected");
    private readonly CssClass _teamHidden = new("team-hidden");

    private void SelectTeam(Guid teamId)
    {
        if (_selectedClassForTeam.TryGetValue(teamId, out var value))
        {
            _selectedClassForTeam[teamId] = value == _teamHidden ? _teamSelected : _teamHidden;
        }
        else
        {
            _selectedClassForTeam[teamId] = _teamSelected;
        }

        ResetWorkItemCounts();
    }

    private void ResetWorkItemCounts()
    {
        var selectedTeamIds = _selectedClassForTeam.Where(kvp => kvp.Value == _teamSelected).Select(kvp => kvp.Key).ToArray();
        var teamWorkItems = _workItems?.Where(wi => wi.Sprint?.TeamId.IsIn(selectedTeamIds) ?? false).ToArray() ?? [];
        WorkItemActiveCount = teamWorkItems.Count(wi => wi.State != ScrumState.Done);
        WorkItemDoneCount = teamWorkItems.Length - WorkItemActiveCount;
    }

    private int WorkItemActiveCount { get; set; }
    private int WorkItemDoneCount { get; set; }
}
