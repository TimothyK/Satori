@page "/DailyStandUps"
@using Satori.AppServices.ViewModels.DailyStandUps
@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels
@attribute [StreamRendering]
@inject UserService UserService

<h3>Daily Stand-Ups</h3>


<div class="filter-row">
    <div class="filter-label">Date Range:</div>
    <div class="dropdown">
        <button class="dropbtn">@DateSelector.PeriodText 🔽</button>
        <div class="dropdown-content">
            <div class="dropdown-content-menu" @onclick="() => DateSelector.ChangePeriod(Period.Today)">Today</div>
            <div class="dropdown-content-menu" @onclick="() => DateSelector.ChangePeriod(Period.LastTwoDays)">Last 2 Days</div>
            <div class="dropdown-content-menu" @onclick="() => DateSelector.ChangePeriod(Period.WorkWeek)">Work Week</div>
            <div class="dropdown-content-menu" @onclick="() => DateSelector.ChangePeriod(Period.LastSevenDays)">Last 7 Days</div>
        </div>
    </div>
    <div class="date-range">
        <div><button class="btn-date-range btn-date-range-decrement" @onclick="DateSelector.DecrementPeriod">«</button></div>
        <div><span>@DateSelector.DateRangeText</span></div>
        <div><button class="btn-date-range btn-date-range-increment" @onclick="DateSelector.IncrementPeriod">»</button></div>
    </div>
</div>

@code {

    private Person CurrentUser { get; set; } = Person.Null;
    private DateSelectorViewModel DateSelector { get; set; } = new(Person.Null.FirstDayOfWeek);

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUserAsync();
        DateSelector = new DateSelectorViewModel(CurrentUser.FirstDayOfWeek);
    }

}
