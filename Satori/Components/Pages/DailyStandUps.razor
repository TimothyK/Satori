@page "/DailyStandUps"
@using Satori.AppServices.ViewModels.DailyStandUps
@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels
@using Flurl
@using Satori.AppServices.Extensions
@attribute [StreamRendering]
@inject UserService UserService
@inject StandUpService StandUpService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Daily Stand-Ups</h3>

<div class="filter-row">
    <div class="filter-label">Date Range:</div>
    <div class="dropdown">
        <button class="dropbtn">@DateSelector.PeriodText ▾</button>
        <div class="dropdown-content">
            <div class="dropdown-content-menu" @onclick="() => DateSelector.ChangePeriod(Period.Today)">Today</div>
            <div class="dropdown-content-menu" @onclick="() => DateSelector.ChangePeriod(Period.LastTwoDays)">Last 2 Days</div>
            <div class="dropdown-content-menu" @onclick="() => DateSelector.ChangePeriod(Period.WorkWeek)">Work Week</div>
            <div class="dropdown-content-menu" @onclick="() => DateSelector.ChangePeriod(Period.LastSevenDays)">Last 7 Days</div>
        </div>
    </div>
    <div class="date-range">
        <div><button class="btn-date-range btn-date-range-decrement" @onclick="DateSelector.DecrementPeriod">«</button></div>
        <div><span>@DateSelector.DateRangeText</span></div>
        <div><button class="btn-date-range btn-date-range-increment" @onclick="DateSelector.IncrementPeriod">»</button></div>
    </div>
</div>

@foreach (var day in StandUpDays)
{
    <div class="day-header">
        <div class="duration"><span class="duration-minutes">@day.TotalTime.ToString(@"hh\:mm")</span> <span class="duration-decimal">(@day.TotalTime.TotalHours.ToNearest(0.05) h)</span></div>
        <div class="export @(day.AllExported ? "export-done" : "") @(day.CanExport ? "export-enabled" : "")">
            @if (day.AllExported)
            {
                <span class="badge bg-secondary">Exported</span>
            }
            else if (day.CanExport)
            {
                <button class="btn btn-outline-success">Export</button>
            }
            else
            {
                <span class="badge bg-danger">Cannot Export</span>
            }
        </div>
        <div class="day-header-day">@day.Date.ToString("D")</div>
    </div>
}

@code {

    private Person CurrentUser { get; set; } = Person.Empty;
    private DateSelectorViewModel DateSelector { get; set; } = new(Person.Empty.FirstDayOfWeek);
    private StandUpDay[] StandUpDays { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUserAsync();
        var period = GetPeriodFromUrl();
        DateSelector = new DateSelectorViewModel(CurrentUser.FirstDayOfWeek);
        DateSelector.DateChanged += DateChanged;
        DateSelector.ChangePeriod(period);
    }

    private Period GetPeriodFromUrl()
    {
        var periodString = new Url(NavigationManager.Uri).QueryParams
            .Where(qp => qp.Name == "DatePeriod")
            .Select(qp => qp.Value.ToString())
            .FirstOrDefault();
        return Enum.TryParse(periodString, out Period period) ? period : DateSelector.Period;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var period = await LocalStorage.GetItemAsync<Period>("DatePeriod");
            CurrentPeriod = period;
            DateSelector.ChangePeriod(period);
            StateHasChanged();
        }
    }

    private Period CurrentPeriod { get; set; }
    private void DateChanged(object? sender, EventArgs eventArgs)
    {
        if (CurrentPeriod != DateSelector.Period)
        {
            var url = NavigationManager.Uri
                .AppendQueryParam("DatePeriod", null)
                .AppendQueryParam("DatePeriod", DateSelector.Period);
            NavigationManager.NavigateTo(url, forceLoad: false);
        
            LocalStorage.SetItemAsync("DatePeriod", DateSelector.Period);
            CurrentPeriod = DateSelector.Period;
        }
        
        RunReport();
    }

    private void RunReport()
    {
        StandUpDays = Task.Run(async () => 
            await StandUpService.GetStandUpDaysAsync(DateSelector.BeginDate, DateSelector.EndDate)
        ).Result;
    }

}
