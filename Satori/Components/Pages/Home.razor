@page "/"
@using Satori.AppServices.Models
@using Satori.AppServices.Services
@using Flurl
@using Satori.Utilities
@inject IConnectionSettingsStore ConnectionSettingsStore
@inject UserService UserService

<PageTitle>Satori</PageTitle>

<h1>Welcome to Satori</h1>
<div style="display: flex;">

    <div>
        <p style="text-align: center;">
            <img src="images/Satori.png" alt="Satori" class="img-fluid" style="width: 100px; height: 214px;" />
        </p>
    </div>
    <div style="display: flex; justify-content: center; align-items: center; width: 600px; margin-left: 50px;">
        <p>
            Satori is web application that provides comprehension and understanding to the existing systems you already are using.
            These include issue tracking, project management, time tracking, and other systems.
            Unified dashboards pull information from multiple systems and merging them into a consistent view.
        </p>

    </div>
</div>

<h3>Integrations</h3>

<div class="card-stack">
    <div class="card">
        <div class="card-body">
            <a href="@_azureDevOpsUrl" target="_blank">
                <img src="images/AzureDevOps-Logo.png" alt="Azure DevOps Logo" />
                <p class="card-text">Azure DevOps</p>
            </a>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary" @onclick="ShowAzureDevOps">Edit</button>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <a href="@_kimaiUrl" target="_blank">
                <img src="images/kimai_Logo.png" alt="Kimai Logo" />
                <p class="card-text">Kimai</p>
            </a>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary">Edit</button>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <a href="@_rabbitMqUrl" target="_blank">
                <img style="padding: 15px;" src="images/rabbitmq.svg" alt="RabbitMQ Logo" />
                <p class="card-text">RabbitMQ</p>
            </a>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary">Edit</button>
        </div>
    </div>

</div>

<div id="edit-azureDevOps" class="integration-region @AzureDevopsVisible">
    <h4>Azure DevOps Configuration</h4>
    <div>
        <div class="integration-form">
            <table>
                <tr>
                    <td />
                    <td>
                        <input type="checkbox" id="azdo-enabled"/>
                        <label for="azdo-enabled">Enabled</label>
                    </td>
                </tr>
                <tr>
                    <td><label for="azdo-url">URL:</label></td>
                    <td><input type="text" id="azdo-url" placeholder="https://devops.test/Org" size="50"/></td>
                </tr>
                <tr>
                    <td><label for="azdo-token">Personal Access Token:</label></td>
                    <td><input type="password" id="azdo-token" size="50"/></td>
                </tr>
            </table>
            <button class="btn btn-primary" @onclick="SaveAzureDevOps">Save</button>
            <div class="integration-help">
                <p class="integration-header">Instructions</p>
                <p>In the URL field enter the full URL of the Azure DevOps web portal. This will include the https, the site name, and the Organization as the first and only part of the path of the URL. E.g. https://devops.test/Org</p>
                <p>To get a token to use with Satori</p>
                <ol>
                    <li>go to Azure DevOps web portal</li>
                    <li>click your avatar icon in the top right</li>
                    <li>choose "Security from the menu"</li>
                    <li>on the Personal access tokens tab click the "+ New Token" button</li>
                    <ol>
                        <li>Enter a name for the new token. e.g. "Satori"</li>
                        <li>Change the Expiry Date an interval you wish. Azure DevOps will email you to renew the token when it is about to expire</li>
                        <li>Scopes can be set to "Custom defined"</li>
                        <li>For Work Items choose "Read & write"</li>
                        <li>For Code choose "Read"</li>
                        <li>Click the "Create" button</li>
                    </ol>
                    <li>Copy the token created. Note that you will not be able to get to this token later.</li>
                    <li>Paste the value in the Personal Access Token field below</li>
                </ol>
                   <p class="integration-header">Read Access</p>
                <p>Satori pulls from Azure DevOps work items for the Sprint Board view. Work Items are also displayed with pull requests and Kimai time entries. </p>
                <p>Git Pull Requests are displayed on the Pull Requests page</p>
                <p class="integration-header">Write Access</p>
                <p>From the Stand-up page, Kimai time entries can be exported to update the Completed and Remaining work on task work items.  RabbitMQ must be configured for Export to be enabled.</p>
                <p>From the Sprint Board page, priority of work items can be changed.</p>
            </div>
        </div>
    </div>
</div>

<h5>Privacy Policy</h5>
<p>
    This web application does not store any data whatsoever on any server.
</p>
<p style="max-width: 800px;">
    The access keys to gain access to Azure DevOps, Kimai, or any other integrated service are stored locally in your web browser as encrypted data.
    Those keys are never captured to any other server.
    No data pulled from Azure Devops (work items & pull requests), Kimai (timesheets), or any other integrated service are shared or stored on any external service.
    This data is merely displayed in your web browser.
</p>

<h5>Contributions</h5>
<ul>
    <li><a target="_blank" href="https://github.com/TimothyK/Satori">Source Code</a></li>
    <li>by <a target="_blank" href="http://codemonkeyprojectiles.com">Timothy Klenke</a></li>
</ul>

@code
{
    private Uri? _azureDevOpsUrl;
    private Uri? _kimaiUrl;
    private Uri? _rabbitMqUrl;

    protected override async Task OnInitializedAsync()
    {
        _azureDevOpsUrl = ConnectionSettingsStore.GetAzureDevOpsSettings().Url;
        var person = await UserService.GetCurrentUserAsync();
        _kimaiUrl = ConnectionSettingsStore.GetKimaiSettings().Url
            .AppendPathSegment(person.Language.Replace("-", "_"))
            .AppendPathSegment("timesheet")
            .ToUri();

        _rabbitMqUrl = new Uri($"http://{ConnectionSettingsStore.GetMessageQueueSettings().HostName}:15672");
    }

    public VisibleCssClass AzureDevopsVisible { get; private set; } = VisibleCssClass.Hidden;
    private void ShowAzureDevOps()
    {
        AzureDevopsVisible = VisibleCssClass.Visible;
    }

    private void SaveAzureDevOps()
    {
        AzureDevopsVisible = VisibleCssClass.Hidden;
    }
}
