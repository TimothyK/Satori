@page "/DailyStandUps"
@using System.Timers
@using Satori.AppServices.ViewModels.DailyStandUps
@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels
@using Flurl
@using Satori.AppServices.Extensions
@using Satori.AppServices.ViewModels.WorkItems
@using CodeMonkeyProjectiles.Linq
@using Satori.AppServices.Models
@attribute [StreamRendering]
@inject UserService UserService
@inject StandUpService StandUpService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject IConnectionSettingsStore ConnectionSettingsStore

<PageTitle>Stand-Ups - Satori</PageTitle>

<h3>Daily Stand-Ups</h3>

<div class="filter-row">
    <div class="filter-label">Date Range:</div>
    <div class="dropdown" id="period-button">
        <button class="btn-header dropbtn">@DateSelector.PeriodText ▾</button>
        <div class="dropdown-content">
            <div class="dropdown-content-menu" @onclick="async () => await DateSelector.ChangePeriod(Period.Today)">Today</div>
            <div class="dropdown-content-menu" @onclick="async () => await DateSelector.ChangePeriod(Period.LastTwoDays)">Last 2 Days</div>
            <div class="dropdown-content-menu" @onclick="async () => await DateSelector.ChangePeriod(Period.WorkWeek)">Work Week</div>
            <div class="dropdown-content-menu" @onclick="async () => await DateSelector.ChangePeriod(Period.LastSevenDays)">Last 7 Days</div>
        </div>
    </div>
    <div class="duration">
        <div class="duration-decimal">
            <span class="">@PeriodTotal.TotalHours.ToNearest(0.05)</span>
        </div>
    </div>
    <div>
        <button class="btn-header btn-refresh" @onclick="async () => await RefreshAsync()"><span class="bi bi-refresh"></span></button>
    </div>
    <div class="date-range">
        <div><button class="btn-header btn-date-range" @onclick="DateSelector.DecrementPeriod">«</button></div>
        <div><span>@InLoading @DateSelector.DateRangeText</span></div>
        <div><button class="btn-header btn-date-range" @onclick="DateSelector.IncrementPeriod">»</button></div>
    </div>
    <div class="dropdown" id="collapse-button">
        <button class="btn-header dropbtn">Collapse ▾</button>
        <div class="dropdown-content dropdown-content-right">
            <div class="dropdown-content-menu" @onclick="CollapseAll">All</div>
            <div class="dropdown-content-menu" @onclick="CollapseProjects">Projects</div>
            <div class="dropdown-content-menu" @onclick="CollapseActivities">Activities</div>
            <div class="dropdown-content-menu" @onclick="CollapseTasks">Tasks</div>
            <div class="dropdown-content-menu" @onclick="CollapseNone">None</div>
        </div>
    </div>
</div>

@foreach (var day in StandUpDays)
{
    <div class="day-header">
        <div class="duration">
            <div class="duration-caret"><span class="caret @(day.IsCollapsed ? "" : "caret-down")" @onclick="() => ToggleCollapsed(day)"></span></div>
            <div class="duration-link">
                <a href="@day.Url" target="_blank">
                    <span class="bi bi-box-arrow-up-right"></span>
                </a></div>
            <div class="duration-minutes">
                <span class="">@day.TotalTime.ToString(@"hh\:mm")</span>
            </div>
            <div class="duration-decimal">
                <span class="">@day.TotalTime.TotalHours.ToNearest(0.05)</span>
            </div>
            <ExportButton Summary="day" OnExported="StateHasChanged"></ExportButton>
        </div>
        <div class="day-header-day">@day.Date.ToString("D")</div>
    </div>
    @foreach (var project in day.Projects)
    {
        <div class="project-header @(day.IsCollapsed ? "hidden" : "")">
            <div class="duration">
                <div class="duration-caret"><span class="caret @(project.IsCollapsed ? "" : "caret-down")" @onclick="() => ToggleCollapsed(project)"></span></div>
                <div class="duration-link"><a href="@project.Url" target="_blank">
                    <span class="bi bi-box-arrow-up-right"></span>
                </a></div>
                <div class="duration-minutes">
                    <span class="">@project.TotalTime.ToString(@"hh\:mm")</span>
                </div>
                <div class="duration-decimal">
                    <span class="">@project.TotalTime.TotalHours.ToNearest(0.05)</span>
                </div>
                <ExportButton Summary="project" OnExported="StateHasChanged"></ExportButton>
            </div>
            <div class="project-header-project">@project.ProjectName</div>
            <div class="project-header-customer">
                @if (project.CustomerUrl != null)
                {
                    if (project.CustomerAcronym != null)
                    {
                        <label>@project.CustomerAcronym</label>
                    }
                    <img src="@project.CustomerUrl" alt="@project.CustomerName" title="@project.CustomerName"/>
                }
                else
                {
                    @project.CustomerName
                }
            </div>
        </div>


        @foreach (var activity in project.Activities)
        {
            <div class="activity-header @(day.IsCollapsed || project.IsCollapsed ? "hidden" : "")">
                <div class="duration">
                    <div class="duration-caret"><span class="caret @(activity.IsCollapsed ? "" : "caret-down")" @onclick="() => ToggleCollapsed(activity)"></span></div>
                    <div class="duration-link"><a href="@activity.Url" target="_blank">
                        <span class="bi bi-box-arrow-up-right"></span>
                    </a></div>
                    <div class="duration-minutes">
                        <span class="">@activity.TotalTime.ToString(@"hh\:mm")</span>
                    </div>
                    <div class="duration-decimal">
                        <span class="">@activity.TotalTime.TotalHours.ToNearest(0.05)</span>
                    </div>
                    <ExportButton Summary="activity" OnExported="StateHasChanged"></ExportButton>
                </div>
                <div class="activity-header-activity">@activity.ActivityName</div>
            </div>

            @foreach (var taskSummary in activity.TaskSummaries)
            {
                <div class="taskSummary-header @(day.IsCollapsed || project.IsCollapsed || activity.IsCollapsed ? "hidden" : "")">
                    <div class="duration">
                        <div class="duration-caret"><span class="caret @(taskSummary.IsCollapsed ? "" : "caret-down")" @onclick="() => ToggleCollapsed(taskSummary)"></span></div>
                        <div class="duration-minutes">
                            <span class="">@taskSummary.TotalTime.ToString(@"hh\:mm")</span>
                        </div>
                        <div class="duration-decimal">
                            <span class="">@taskSummary.TotalTime.TotalHours.ToNearest(0.05)</span>
                        </div>
                        <ExportButton Summary="taskSummary" OnExported="StateHasChanged"></ExportButton>
                    </div>
                    <div class="taskSummary-header-description">
                        @if (taskSummary.Task != null)
                        {
                            <div class="work-item-row">
                                @if (taskSummary.Task.Type == WorkItemType.Task && taskSummary.Task.Parent != null)
                                {
                                    <span class="work-item @taskSummary.Task.Parent.Type.CssClass cell-link" @onclick="() => OpenWorkItem(taskSummary.Task.Parent)" title="Open D#@taskSummary.Task.Parent.Id">
                                        D#@taskSummary.Task.Parent.Id
                                        @taskSummary.Task.Parent.Title
                                    </span>
                                }

                                <span class="work-item @taskSummary.Task.Type.CssClass cell-link" @onclick="() => OpenWorkItem(taskSummary.Task)" title="Open D#@taskSummary.Task.Id">
                                    @if (taskSummary.Task.AssignedTo != CurrentUser && taskSummary.Task.Type == WorkItemType.Task)
                                    {
                                        <div class="avatar-cell">
                                            <img src="@taskSummary.Task.AssignedTo.AvatarUrl"
                                                 alt="@taskSummary.Task.AssignedTo.DisplayName"
                                                 title="@taskSummary.Task.AssignedTo.DisplayName"/>
                                        </div>
                                    }
                                    @if (taskSummary.Task.Parent == null || taskSummary.Task.Type != WorkItemType.Task)
                                    {
                                        <label>D#@taskSummary.Task.Id&nbsp;</label>
                                    }
                                    @taskSummary.Task.Title

                                    @if (taskSummary.Task.Type == WorkItemType.Task)
                                    {
                                        if (taskSummary.Task.State == ScrumState.Done)
                                        {
                                            <span class="badge bg-success">✔️ Done</span>
                                        }
                                        else
                                        {
                                            if (taskSummary.Task.State == ScrumState.Removed)
                                            {
                                                <span class="badge bg-success">✔ Removed</span>
                                            }
                                            else
                                            {
                                                if (taskSummary.Task.State == ScrumState.ToDo)
                                                {
                                                    <span class="badge bg-danger">To Do</span>
                                                }
                                            }
                                        }

                                        if (taskSummary.NeedsEstimate)
                                        {
                                            <span class="badge bg-danger">Needs Estimate</span>
                                        }
                                        else
                                        {
                                            if (taskSummary.TimeRemaining != null)
                                            {
                                                <span class="badge @(taskSummary.TimeRemaining > TimeSpan.Zero ? "bg-secondary" : "bg-danger")">@taskSummary.TimeRemaining.Value.TotalHours.ToNearest(0.1) h</span>
                                            }
                                        }
                                    }
                                </span>
                            </div>
                        }
                        @if (taskSummary.IsCollapsed)
                        {
                            @if (taskSummary.OtherComments != null)
                            {
                                <p>@taskSummary.OtherComments</p>
                            }
                            @if (taskSummary.Accomplishments != null)
                            {
                                <div class="flex-row">
                                    <div><span title="Accomplishments">🏆</span></div>
                                    <div><p>@taskSummary.Accomplishments</p></div>
                                </div>
                            }
                            @if (taskSummary.Impediments != null)
                            {
                                <div class="flex-row">
                                    <div><span title="Impediments">🧱</span></div>
                                    <div><p>@taskSummary.Impediments</p></div>
                                </div>
                            }
                            @if (taskSummary.Learnings != null)
                            {
                                <div class="flex-row">
                                    <div><span title="Today I Learned">🧠</span></div>
                                    <div><p>@taskSummary.Learnings</p></div>
                                </div>
                            }
                        }
                    </div>

                </div>
                <table class="time-table @(day.IsCollapsed || project.IsCollapsed || activity.IsCollapsed || taskSummary.IsCollapsed ? "hidden" : "")">
                    @foreach (var entry in taskSummary.TimeEntries)
                    {
                        <tr class="time-entry">
                            <td class="time-entry-time">
                                @entry.Begin.ToString("HH:mm")
                                to 
                                @if (@entry.End == null)
                                {
                                    <span class="enddate-now">now</span>
                                }
                                else
                                {
                                    @entry.End?.ToString("HH:mm")    
                                }
                            </td>
                            <td>
                                <div class="duration">
                                    <div class="duration-minutes">
                                        <span class="">@entry.TotalTime.ToString(@"hh\:mm")</span>
                                    </div>
                                    <div class="duration-decimal">
                                        <span class="">@entry.TotalTime.TotalHours.ToNearest(0.05)</span>
                                    </div>
                                    <ExportButton Summary="entry" OnExported="StateHasChanged"></ExportButton>
                                </div>
                            </td>
                            <td class="time-entry-comments">
                                @if (entry.OtherComments != null)
                                {
                                    <p>@entry.OtherComments</p>
                                }
                                @if (entry.Accomplishments != null)
                                {
                                    <div class="flex-row">
                                        <div><span title="Accomplishments">🏆</span></div>
                                        <div><p>@entry.Accomplishments</p></div>
                                    </div>
                                }
                                @if (entry.Impediments != null)
                                {
                                    <div class="flex-row">
                                        <div><span title="Impediments">🧱</span></div>
                                        <div><p>@entry.Impediments</p></div>
                                    </div>
                                }
                                @if (entry.Learnings != null)
                                {
                                    <div class="flex-row">
                                        <div><span title="Today I Learned">🧠</span></div>
                                        <div><p>@entry.Learnings</p></div>
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                </table>
            }
        }
    }
}

@code {

    private Person CurrentUser { get; set; } = Person.Empty;
    private DateSelectorViewModel DateSelector { get; set; } = new(Person.Empty.FirstDayOfWeek, standUpService: null);
    private StandUpDay[] StandUpDays { get; set; } = [];
    private TimeSpan PeriodTotal { get; set; } = TimeSpan.Zero;
    private Timer? RunningTimeEntryTimer { get; set; } 
    private TimeEntry? RunningTimeEntry { get; set; }

    private LoadingStatusLabel InLoading { get; set; } = LoadingStatusLabel.InLoading;

    protected override async Task OnInitializedAsync()
    {
        if (!ConnectionSettingsStore.GetKimaiSettings().Enabled)
        {
            // This page shouldn't be accessible if Kimai is disabled.  Go to Home page where Kimai can be configured/enabled.
            NavigationManager.NavigateTo("/");
        }

        CurrentUser = await UserService.GetCurrentUserAsync();
        var period = GetPeriodFromUrl();
        DateSelector = new DateSelectorViewModel(CurrentUser.FirstDayOfWeek, StandUpService);
        DateSelector.DateChanging += DateChanging;
        DateSelector.DateChanged += DateChanged;
        await DateSelector.ChangePeriod(period);
    }

    private Period GetPeriodFromUrl()
    {
        var periodString = new Url(NavigationManager.Uri).QueryParams
            .Where(qp => qp.Name == "DatePeriod")
            .Select(qp => qp.Value.ToString())
            .FirstOrDefault();
        return Enum.TryParse(periodString, out Period period) ? period : DateSelector.Period;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var period = await LocalStorage.GetItemAsync<Period>("DatePeriod");
            CurrentPeriod = period;
            await DateSelector.ChangePeriod(period);
            StateHasChanged();
        }
    }

    private Period CurrentPeriod { get; set; }
    private void DateChanging(object? sender, EventArgs eventArgs)
    {
        InLoading = LoadingStatusLabel.InLoading;
        StandUpDays = [];

        if (CurrentPeriod == DateSelector.Period)
        {
            return;
        }

        var url = NavigationManager.Uri
            .AppendQueryParam("DatePeriod", null)
            .AppendQueryParam("DatePeriod", DateSelector.Period);
        NavigationManager.NavigateTo(url, forceLoad: false);

        LocalStorage.SetItemAsync("DatePeriod", DateSelector.Period);
        CurrentPeriod = DateSelector.Period;
    }

    private async Task RefreshAsync()
    {
        InLoading = LoadingStatusLabel.InLoading;
        await DateSelector.RefreshAsync();
    }

    private void DateChanged(object? sender, DateChangedEventArgs eventArgs)
    {
        StandUpDays = eventArgs.StandUpDays;

        RunningTimeEntry = StandUpDays
            .SelectMany(d => d.Projects)
            .SelectMany(p => p.Activities)
            .SelectMany(a => a.TimeEntries)
            .FirstOrDefault(e => e.IsRunning);

        RunningTimeEntryTimer ??= new Timer(TimeSpan.FromMinutes(1))
            .With(t => t.Elapsed += RunningTimeEntryTimer_Elapsed);
        RunningTimeEntryTimer.Enabled = RunningTimeEntry != null;
        RefreshTotalTimes();

        PeriodTotal = StandUpDays.Select(d => d.TotalTime).Sum();
        InLoading = LoadingStatusLabel.FinishedLoading;
    }

    private void RunningTimeEntryTimer_Elapsed(object? sender, ElapsedEventArgs e)
    {
        RefreshTotalTimes();
        InvokeAsync(StateHasChanged);
    }

    private void RefreshTotalTimes()
    {
        if (RunningTimeEntry == null)
        {
            if (RunningTimeEntryTimer != null)
            {
                RunningTimeEntryTimer.Enabled = false;
            }
            return;
        }

        RunningTimeEntry.TotalTime = DateTimeOffset.Now - RunningTimeEntry.Begin;

        if (RunningTimeEntry.Task?.RemainingWork != null && RunningTimeEntry.Task?.State != ScrumState.Done)
        {
            var task = RunningTimeEntry.Task;
            var timeEntries = StandUpDays
                .SelectMany(d => d.TimeEntries)
                .Where(timeEntry => timeEntry.Task == task)
                .ToArray();
            StandUpService.ResetTimeRemaining(timeEntries);
        }

        var taskSummary = RunningTimeEntry.ParentTaskSummary ?? throw new InvalidOperationException();
        taskSummary.TotalTime = taskSummary.TimeEntries.Select(e => e.TotalTime).Sum();

        var activitySummary = taskSummary.ParentActivitySummary;
        activitySummary.TotalTime = activitySummary.TimeEntries.Select(t => t.TotalTime).Sum();

        var projectSummary = activitySummary.ParentProjectSummary;
        projectSummary.TotalTime = projectSummary.Activities.Select(a => a.TotalTime).Sum();

        var daySummary = projectSummary.ParentDay;
        daySummary.TotalTime = daySummary.Projects.Select(p => p.TotalTime).Sum();

        PeriodTotal = StandUpDays.Select(d => d.TotalTime).Sum();
    }


    private void OpenWorkItem(WorkItem workItem)
    {
        JsRuntime.InvokeVoidAsync("open", workItem.Url, "_blank");
    }

    #region Collapse

    private static void ToggleCollapsed(StandUpDay day)
    {
        day.IsCollapsed = !day.IsCollapsed;
    }
    private static void ToggleCollapsed(ProjectSummary project)
    {
        project.IsCollapsed = !project.IsCollapsed;
    }
    private static void ToggleCollapsed(ActivitySummary activity)
    {
        activity.IsCollapsed = !activity.IsCollapsed;
    }   
    private static void ToggleCollapsed(TaskSummary taskSummary)
    {
        taskSummary.IsCollapsed = !taskSummary.IsCollapsed;
    }  
    
    private void CollapseAll()
    {
        foreach (var node in StandUpDays)
        {
            node.IsCollapsed = true;
        }
    }

    private void CollapseProjects()
    {
        foreach (var day in StandUpDays)
        {
            day.IsCollapsed = false;
            foreach (var project in day.Projects)
            {
                project.IsCollapsed = true;
            }
        }
    }

    private void CollapseActivities()
    {
        foreach (var day in StandUpDays)
        {
            day.IsCollapsed = false;
            foreach (var project in day.Projects)
            {
                project.IsCollapsed = false;
                foreach (var activity in project.Activities)
                {
                    activity.IsCollapsed = true;
                }
            }
        }
    }

    private void CollapseTasks()
    {
        foreach (var day in StandUpDays)
        {
            day.IsCollapsed = false;
            foreach (var project in day.Projects)
            {
                project.IsCollapsed = false;
                foreach (var activity in project.Activities)
                {
                    activity.IsCollapsed = false;
                    foreach (var taskSummary in activity.TaskSummaries)
                    {
                        taskSummary.IsCollapsed = true;
                    }
                }
            }
        }
    }

    private void CollapseNone()
    {
        foreach (var day in StandUpDays)
        {
            day.IsCollapsed = false;
            foreach(var project in day.Projects)
            {
                project.IsCollapsed = false;
                foreach (var activity in project.Activities)
                {
                    activity.IsCollapsed = false;
                    foreach (var taskSummary in activity.TaskSummaries)
                    {
                        taskSummary.IsCollapsed = false;
                    }
                }
            }
        }
    }

    #endregion Collapse

    private class LoadingStatusLabel
    {
        private readonly string _label;

        private LoadingStatusLabel(string label)
        {
            _label = label;
        }

        public override string ToString() => _label;

        public static readonly LoadingStatusLabel InLoading = new("Loading: ");
        public static readonly LoadingStatusLabel FinishedLoading = new(string.Empty);
    }
}
