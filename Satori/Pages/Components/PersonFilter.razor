@using CodeMonkeyProjectiles.Linq
@using Satori.AppServices.ViewModels

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="root flex-row">
    <span class="label">@Label</span>
    <div class="dropdown">
        <button class="dropbtn avatar-cell @FilterWithBorders" @onclick="ToggleFilterAsync">
            <img src="@CurrentPerson.AvatarUrl"
                 alt="@CurrentPerson.DisplayName"
                 title="Filtering to work items involving @CurrentPerson.DisplayName"/>
        </button>

        <div class="dropdown-content">
            <div class="dropdown-content-menu" @onclick="() => OnSetFilterAsync(Person.Anyone)">
                <button class="avatar-cell">
                    <img src="@Person.Anyone.AvatarUrl"
                         alt="@Person.Anyone.DisplayName"
                         title="Filtering to work items involving @Person.Anyone.DisplayName"/>
                    @Person.Anyone.DisplayName
                </button>
            </div>
            @if (@Person.Me != null)
            {
                <div class="dropdown-content-menu" @onclick="SetFilterMeAsync">
                    <button class="avatar-cell">
                        <img src="@Person.Me.AvatarUrl"
                             alt="@Person.Me.DisplayName"
                             title="Filtering to work items involving @Person.Me.DisplayName"/>
                        Me
                    </button>
                </div>
            }
            @if (AllowNull)
            {
                <div class="dropdown-content-menu" @onclick="() => OnSetFilterAsync(Person.Empty)">
                    <button class="avatar-cell">
                        <img src="@Person.Empty.AvatarUrl"
                             alt="@Person.Empty.DisplayName"
                             title="Filtering to work items involving @Person.Empty.DisplayName"/>
                        @Person.Empty.DisplayName
                    </button>
                </div>
            }
            @foreach (var person in People.Except(Person.Empty.Yield()))
            {
                <div class="dropdown-content-menu" @onclick="() => OnSetFilterAsync(person)">
                    <button class="avatar-cell">
                        <img src="@person.AvatarUrl"
                             alt="@person.DisplayName"
                             title="Filtering to work items involving @person.DisplayName"/>
                        @person.DisplayName
                    </button>
                </div>
            }
        </div>
    </div>
</div>

