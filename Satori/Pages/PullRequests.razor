@page "/PullRequests"
@attribute [StreamRendering]
@using Satori.AppServices.ViewModels.PullRequests
@using Satori.AppServices.Services
@using CodeMonkeyProjectiles.Linq
@using Satori.AppServices.Models
@using Satori.AppServices.ViewModels
@using Toolbelt.Blazor.HotKeys2
@using Satori.Pages.Components
@inject PullRequestService PullRequestService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IConnectionSettingsStore ConnectionSettingsStore
@inject HotKeys HotKeys

<PageTitle>Pull Requests - Satori</PageTitle>

<div class="flex-row">
    <div class="page-title">Pull Requests</div>
    <div class="counters">
        <span class="badge bg-primary">@FilteredPullRequests.Count()</span>
    </div>
    <CustomerFilter Projects="Projects" OnFilterChanged="OnForFilterChanged" @ref="ForFilter" QueryParamName="for" StorageKeyName="PullRequest.For"></CustomerFilter>
    <PersonFilter Label="By" People="Authors" AllowNull="false" OnFilterChanged="OnAuthorFilterChanged" @ref="AuthorFilter" QueryParamName="by" StorageKeyName="PullRequest.By"></PersonFilter>
    <PersonFilter Label="With" People="WithPeople" AllowNull="false" OnFilterChanged="OnWithFilterChanged" @ref="WithPersonFilter" QueryParamName="with" StorageKeyName="PullRequest.With"></PersonFilter>
    <PersonFilter Label="On" People="ActionItemPeople" AllowNull="false" OnFilterChanged="OnActionItemFilterChanged" @ref="ActionItemPersonFilter" QueryParamName="on" StorageKeyName="PullRequest.On"></PersonFilter>
    <div>
        <button class="btn-header btn-refresh @InLoading" title="Refresh (Alt+F5)" @onclick="async () => await RefreshAsync()"><span class="bi bi-refresh"></span></button>
    </div>
</div>

@if (InLoading == InLoadingCssClass && FilteredPullRequests.None())
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Pull Request</th>
                <th>Work Items</th>
                <th>Created By</th>
                <th>Reviews</th>
                <th>Action Items</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pullRequest in FilteredPullRequests)
            {
                <tr style="vertical-align:middle;">
                    <td class="cell-link" @onclick="() => OpenPullRequestAsync(pullRequest)" title="Open PR#@(pullRequest.Id)">
                        <div class="pullrequest-cell">
                            <div class="pullrequest-id">@pullRequest.Id</div>
                            <div>
                                <span class="pullrequest-repositoryname">@pullRequest.Project/@pullRequest.RepositoryName</span>
                                <br />
                                <span>@pullRequest.Title</span>
                            </div>
                        </div>
                    </td>
                    <td>
                        @foreach (var workItem in pullRequest.WorkItems)
                        {
                            <div class="work-item @workItem.Type.CssClass cell-link" @onclick="() => OpenWorkItemAsync(workItem)" title="Open D#@(workItem.Id)">
                                <span class="work-item-id">@workItem.Id</span> @workItem.Title
                            </div>
                        }
                        @foreach (var project in pullRequest.WorkItems.SelectWhereHasValue(wi => wi.KimaiProject).Distinct())
                        {
                            <div class="flex-row project-row">
                                <div class="avatar-cell">
                                    <img src="@project?.Customer.Logo" alt="@project?.Customer.Name"/>
                                </div>
                                <div class="project-code">
                                    <span class="project-id">@project?.ProjectCode</span>
                                </div>
                            </div>
                        }
                        @foreach (var label in pullRequest.Labels)
                        {
                            <div style="display: flex;">
                                <div style="align-self: center;">
                                    <span class="badge bg-secondary bg-gradient" style="font-size:0.5rem;">@label</span>
                                </div>
                            </div>
                        }
                    </td>
                    <td>
                        <div style="display: flex;">
                            <div style="align-self: center;">
                                <img src="@pullRequest.CreatedBy.AvatarUrl" width="24" height="24"
                                     alt="@pullRequest.CreatedBy.DisplayName"
                                     title="@pullRequest.CreatedBy.DisplayName" />
                            </div>
                            <div style="margin-left: 3px;">
                                <div>
                                    <span class="timestamp">
                                        @pullRequest.CreationDate.LocalDateTime.ToString("yyyy-MM-dd")
                                    </span>
                                </div>
                                @if (pullRequest.Status == Status.Draft)
                                {
                                    <div style="margin-top: -10px;">
                                        <span class="badge bg-warning" style="font-size:0.5rem;">Draft</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>

                    <td>
                        <div class="avatar-row">
                            @foreach (var review in pullRequest.Reviews.OrderByDescending(r => r.IsRequired))
                            {
                                <div class="avatar-cell @(review.IsRequired ? "" : "review-optional")">
                                    <img src="@review.Reviewer.AvatarUrl"
                                         alt = "@(review.IsRequired ? "" : "Optional:") @review.Reviewer.DisplayName"
                                         title="@(review.IsRequired ? "" : "Optional:") @review.Reviewer.DisplayName" />
                                    @if (review.Vote >= ReviewVote.ApprovedWithSuggestions)
                                    {
                                        <span class="vote vote-approved"></span>
                                    }
                                    @if (review.Vote is ReviewVote.WaitingForAuthor)
                                    {
                                        <span class="vote vote-wait"></span>
                                    }
                                    @if (review.Vote == ReviewVote.Rejected)
                                    {
                                        <span class="vote vote-rejected"></span>
                                    }
                                </div>
                            }
                        </div>
                        

                    </td>
                    
                    <td>
                        @foreach (var actionItem in pullRequest.ActionItems)
                        {
                            <div class="avatar-row">
                                @foreach (var assignee in actionItem.On)
                                {
                                    <div class="avatar-cell action-item-avatar @(assignee.Person == Person.Me ? "highlight" : "")">
                                        <img src="@assignee.Person.AvatarUrl" 
                                             alt="@assignee.Person.DisplayName"
                                             title="@assignee.Person.DisplayName"/>
                                    </div>
                                }
                                <div>@actionItem.ActionDescription</div>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

}
