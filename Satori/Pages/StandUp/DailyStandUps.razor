@page "/DailyStandUps"

@using Satori.AppServices.Services
@using Satori.AppServices.Extensions
@using CodeMonkeyProjectiles.Linq
@using Satori.AppServices.Models
@using Satori.Pages.StandUp.Components
@using Toolbelt.Blazor.HotKeys2
@attribute [StreamRendering]
@inject UserService UserService
@inject StandUpService StandUpService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IConnectionSettingsStore ConnectionSettingsStore
@inject TimerService TimerService
@inject HotKeys HotKeys

<PageTitle>Stand-Ups - Satori</PageTitle>

<h3>Daily Stand-Ups</h3>

<div class="filter-row">
    <div class="filter-label">Date Range:</div>
    <div class="dropdown" id="period-button">
        <button class="btn-header dropbtn">@DateSelector.PeriodText ▾</button>
        <div class="dropdown-content">
            <div class="dropdown-content-menu" @onclick="async () => await DateSelector.ChangePeriodAsync(AppServices.ViewModels.DailyStandUps.Period.Today)">Today</div>
            <div class="dropdown-content-menu" @onclick="async () => await DateSelector.ChangePeriodAsync(AppServices.ViewModels.DailyStandUps.Period.LastTwoDays)">Last 2 Days</div>
            <div class="dropdown-content-menu" @onclick="async () => await DateSelector.ChangePeriodAsync(AppServices.ViewModels.DailyStandUps.Period.WorkWeek)">Work Week</div>
            <div class="dropdown-content-menu" @onclick="async () => await DateSelector.ChangePeriodAsync(AppServices.ViewModels.DailyStandUps.Period.LastSevenDays)">Last 7 Days</div>
        </div>
    </div>
    <div class="duration">
        <div class="duration-decimal">
            <span class="">@Period.TotalTime.TotalHours.ToNearest(0.05)</span>
        </div>
    </div>
    <div>
        <button class="btn-header btn-refresh @InLoadingCssClass" title="Refresh (Alt+F5)" @onclick="async () => await RefreshAsync()"><span class="bi bi-refresh"></span></button>
    </div>
    <div class="date-range">
        <div><button class="btn-header btn-date-range" @onclick="DateSelector.DecrementPeriodAsync">«</button></div>
        <div><span>@InLoadingLabel @DateSelector.DateRangeText</span></div>
        <div><button class="btn-header btn-date-range" @onclick="DateSelector.IncrementPeriodAsync">»</button></div>
    </div>
    <div class="dropdown" id="collapse-button">
        <button class="btn-header dropbtn">Collapse ▾</button>
        <div class="dropdown-content dropdown-content-right">
            <div class="dropdown-content-menu" @onclick="CollapseAll">All</div>
            <div class="dropdown-content-menu" @onclick="CollapseProjects">Projects</div>
            <div class="dropdown-content-menu" @onclick="CollapseActivities">Activities</div>
            <div class="dropdown-content-menu" @onclick="CollapseTasks">Tasks</div>
            <div class="dropdown-content-menu" @onclick="CollapseNone">None</div>
        </div>
    </div>
</div>

@foreach (var day in Period.Days)
{
    <div class="day-header">
        <div class="duration">
            <div class="duration-expand"><span class="tree-node @(day.IsCollapsed ? "" : "node-expanded")" @onclick="() => ToggleCollapsed(day)"></span></div>
            <div class="duration-link" title="Open in Kimai">
                <a href="@day.Url" target="_blank">
                    <span class="bi bi-box-arrow-up-right"></span>
                </a></div>
            <div class="duration-minutes">
                <span class="">@day.TotalTime.ToString(@"hh\:mm")</span>
            </div>
            <div class="duration-decimal">
                <span class="">@day.TotalTime.TotalHours.ToNearest(0.05)</span>
            </div>
            <ExportButton Summary="day" OnChanged="StateHasChanged"></ExportButton>
        </div>
        <div class="day-header-day">@day.Date.ToString("D")</div>
    </div>
    @foreach (var project in day.Projects)
    {
        <div class="project-header @(day.IsCollapsed ? "hidden" : "")">
            <div class="duration">
                <div class="duration-expand"><span class="tree-node @(project.IsCollapsed ? "" : "node-expanded")" @onclick="() => ToggleCollapsed(project)"></span></div>
                <div class="duration-link" title="Open in Kimai">
                    <a href="@project.Url" target="_blank">
                        <span class="bi bi-box-arrow-up-right"></span>
                    </a></div>
                <div class="duration-minutes">
                    <span class="">@project.TotalTime.ToString(@"hh\:mm")</span>
                </div>
                <div class="duration-decimal">
                    <span class="">@project.TotalTime.TotalHours.ToNearest(0.05)</span>
                </div>
                <ExportButton Summary="project" OnChanged="StateHasChanged"></ExportButton>
            </div>
            <div class="project-header-project">@project.ProjectName</div>
            <div class="project-header-customer">
                @if (project.CustomerUrl != null)
                {
                    if (project.CustomerAcronym != null)
                    {
                        <label>@project.CustomerAcronym</label>
                    }
                    <img src="@project.CustomerUrl" alt="@project.CustomerName" title="@project.CustomerName"/>
                }
                else
                {
                    @project.CustomerName
                }
            </div>
        </div>


        @foreach (var activity in project.Activities)
        {
            <div class="activity-header @(day.IsCollapsed || project.IsCollapsed ? "hidden" : "")">
                <div class="duration">
                    <div class="duration-expand"><span class="tree-node @(activity.IsCollapsed ? "" : "node-expanded")" @onclick="() => ToggleCollapsed(activity)"></span></div>
                    <div class="duration-link" title="Open in Kimai"><a href="@activity.Url" target="_blank">
                            <span class="bi bi-box-arrow-up-right"></span>
                        </a></div>
                    <div class="duration-minutes">
                        <span class="">@activity.TotalTime.ToString(@"hh\:mm")</span>
                    </div>
                    <div class="duration-decimal">
                        <span class="">@activity.TotalTime.TotalHours.ToNearest(0.05)</span>
                    </div>
                    <ExportButton Summary="activity" OnChanged="StateHasChanged"></ExportButton>
                </div>
                <div class="activity-header-activity">@activity.ActivityName</div>
            </div>

            @foreach (var taskSummary in activity.TaskSummaries)
            {
                <div class="taskSummary-header @(day.IsCollapsed || project.IsCollapsed || activity.IsCollapsed ? "hidden" : "")">
                    <div class="duration">
                        <div class="duration-expand"><span class="tree-node @(taskSummary.IsCollapsed ? "" : "node-expanded")" @onclick="() => ToggleCollapsed(taskSummary)"></span></div>
                        <EditStandUpDialog TimeEntries="@taskSummary.TimeEntries" OnOpening="OnOpeningDialog" OnSaved="OnSavedDialog" OnClosed="OnClosedDialog"></EditStandUpDialog>
                        <div class="restart-timer" title="Restart Timer" @onclick="async () => await RestartTimerAsync(taskSummary.TimeEntries)"><span class="restart-timer-icon"></span></div>
                        <div class="duration-minutes">
                            <span class="">@taskSummary.TotalTime.ToString(@"hh\:mm")</span>
                        </div>
                        <div class="duration-decimal">
                            <span class="">@taskSummary.TotalTime.TotalHours.ToNearest(0.05)</span>
                        </div>
                        <ExportButton Summary="taskSummary" OnChanged="StateHasChanged"></ExportButton>
                    </div>
                    <div class="taskSummary-header-description">
                        <WorkItemView WorkItem="taskSummary.Task" TimeRemaining="taskSummary.TimeRemaining" Activity="taskSummary.ParentActivitySummary"></WorkItemView>
                        @if (taskSummary.IsCollapsed)
                        {
                            @if (taskSummary.OtherComments != null)
                            {
                                <p>@taskSummary.OtherComments</p>
                            }
                            @if (taskSummary.Accomplishments != null)
                            {
                                <div class="flex-row">
                                    <div><span title="Accomplishments">🏆</span></div>
                                    <div><p>@taskSummary.Accomplishments</p></div>
                                </div>
                            }
                            @if (taskSummary.Impediments != null)
                            {
                                <div class="flex-row">
                                    <div><span title="Impediments">🧱</span></div>
                                    <div><p>@taskSummary.Impediments</p></div>
                                </div>
                            }
                            @if (taskSummary.Learnings != null)
                            {
                                <div class="flex-row">
                                    <div><span title="Today I Learned">🧠</span></div>
                                    <div><p>@taskSummary.Learnings</p></div>
                                </div>
                            }
                        }
                    </div>

                </div>
                <table class="time-table @(day.IsCollapsed || project.IsCollapsed || activity.IsCollapsed || taskSummary.IsCollapsed ? "hidden" : "")">
                    @foreach (var entry in taskSummary.TimeEntries)
                    {
                        <tr class="time-entry">
                            <td class="time-entry-time">
                                @entry.Begin.ToString("HH:mm")
                                to 
                                @if (entry.End == null)
                                {
                                    <span class="enddate-now">now</span>
                                }
                                else
                                {
                                    @entry.End?.ToString("HH:mm")    
                                }
                            </td>
                            <td>
                                <div class="duration">
                                    <EditStandUpDialog TimeEntries="@entry.Yield().ToArray()" OnOpening="OnOpeningDialog" OnSaved="OnSavedDialog" OnClosed="OnClosedDialog"></EditStandUpDialog>
                                    <div class="restart-timer" title="Restart Timer" @onclick="async () => await RestartTimerAsync(entry)"><span class="restart-timer-icon"></span></div>
                                    <div class="duration-minutes">
                                        <span class="">@entry.TotalTime.ToString(@"hh\:mm")</span>
                                    </div>
                                    <div class="duration-decimal">
                                        <span class="">@entry.TotalTime.TotalHours.ToNearest(0.05)</span>
                                    </div>
                                    <ExportButton Summary="entry" OnChanged="StateHasChanged"></ExportButton>
                                </div>
                            </td>
                            <td class="time-entry-comments">
                                @if (entry.OtherComments != null)
                                {
                                    <p>@entry.OtherComments</p>
                                }
                                @if (entry.Accomplishments != null)
                                {
                                    <div class="flex-row">
                                        <div><span title="Accomplishments">🏆</span></div>
                                        <div><p>@entry.Accomplishments</p></div>
                                    </div>
                                }
                                @if (entry.Impediments != null)
                                {
                                    <div class="flex-row">
                                        <div><span title="Impediments">🧱</span></div>
                                        <div><p>@entry.Impediments</p></div>
                                    </div>
                                }
                                @if (entry.Learnings != null)
                                {
                                    <div class="flex-row">
                                        <div><span title="Today I Learned">🧠</span></div>
                                        <div><p>@entry.Learnings</p></div>
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                </table>
            }
        }
    }
}

