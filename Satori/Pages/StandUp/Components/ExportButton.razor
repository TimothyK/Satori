@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels.DailyStandUps
@inject StandUpService StandUpService

<div class="export @(Summary.AllExported ? "export-done" : "") @(Summary.CanExport ? "export-enabled" : "")">
    @if (Summary.AllExported)
    {
        <span class="badge bg-secondary">Exported</span>
    }
    else if (Summary.IsRunning)
    {
        <div class="flex-row stop-row">
            <span class="duration-running"></span>
            <button class="btn-common btn-stop" @onclick="async () => await StopAsync(Summary)">■ Stop</button>
        </div>
    }
    else if (Summary.CanExport)
    {
        <button class="btn-common btn-export" @onclick="async () => await ExportAsync(Summary)">Export</button>
    }
    else
    {
        <span class="export-cannot"></span>
    }
</div>

@code {
    [Parameter] 
    public required ISummary Summary { get; set; }
    private static bool _isClicking;
    [Parameter]
    public EventCallback OnChanged { get; set; }

    private async Task ExportAsync(ISummary summary)
    {
        await ClickButtonTemplate(() => StandUpService.ExportAsync(summary.TimeEntries.Where(x => x.CanExport).ToArray()));
    }

    private async Task StopAsync(ISummary summary)
    {
        var runningTimeEntry = summary.TimeEntries.SingleOrDefault(x => x.IsRunning);
        if (runningTimeEntry == null)
        {
            throw new InvalidOperationException("Stop button should not have been available");
        }

        await ClickButtonTemplate(() => StandUpService.StopTimerAsync(runningTimeEntry));
    }

    private async Task ClickButtonTemplate(Func<Task> doWork)
    {
        if (_isClicking)
        {
            return;
        }

        _isClicking = true;
        try
        {
            await doWork.Invoke();
        }
        finally
        {
            _isClicking = false;
        }

        await OnChanged.InvokeAsync();
    }

}
