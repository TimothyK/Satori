@using System.Timers
@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels
@using Satori.AppServices.ViewModels.DailyStandUps
@using Satori.AppServices.ViewModels.WorkItems
@inject StandUpService StandUpService
@inject WorkItemUpdateService WorkItemUpdateService

<div class="export @(Summary.AllExported ? "export-done" : "") @(Summary.CanExport ? "export-enabled" : "")">
    @if (Summary.AllExported)
    {
        <span class="badge bg-secondary">Exported</span>
    }
    else if (Summary.IsRunning)
    {
        <span class="duration-running"></span>
        <button class="btn-common btn-stop" @onclick="async () => await StopAsync(Summary)">■ Stop</button>
        @if (ShowDoneButton)
        {
            <button class="btn-common btn-done" @onclick="async () => await StopAndDoneAsync(Summary)">✔️ Done</button>
        }
    }
    else if (Summary.CanExport)
    {
        <button class="btn-common btn-export" @onclick="async () => await ExportAsync(Summary)">Export</button>
    }
    else
    {
        <span class="export-cannot"></span>
    }
    <div class="alert alert-danger alert-dismissible fade show @ShowAlertClassName" role="alert">
        @AlertContent
    </div>  
</div>

@code {
    [Parameter] 
    public required ISummary Summary { get; set; }
    private static bool _isClicking;
    [Parameter]
    public EventCallback OnChanged { get; set; }

    private bool ShowDoneButton { get; set; }

    protected override void OnParametersSet()
    {
        if (Summary.IsRunning)
        {
            var task = GetRunningTimeEntry(Summary).Task;
            ShowDoneButton = task != null && task.Type == WorkItemType.Task && task.State != ScrumState.Done && task.AssignedTo == Person.Me;
        }
        else
        {
            ShowDoneButton = false;
        }

        base.OnParametersSet();
    }

    private async Task ExportAsync(ISummary summary)
    {
        await ClickButtonTemplate(() => StandUpService.ExportAsync(summary.TimeEntries.Where(x => x.CanExport).ToArray()));
    }

    private async Task StopAsync(ISummary summary)
    {
        var runningTimeEntry = GetRunningTimeEntry(summary);
        await ClickButtonTemplate(() => StandUpService.StopTimerAsync(runningTimeEntry));
    }

    private async Task StopAndDoneAsync(ISummary summary)
    {
        var runningTimeEntry = GetRunningTimeEntry(summary);
        await ClickButtonTemplate(async () =>
        {
            await StandUpService.StopTimerAsync(runningTimeEntry);

            var task = runningTimeEntry.Task;
            if (task != null)
            {
                await WorkItemUpdateService.UpdateTaskAsync(task, ScrumState.Done);
            }
        });

    }

    private static TimeEntry GetRunningTimeEntry(ISummary summary)
    {
        var runningTimeEntry = summary.TimeEntries.SingleOrDefault(x => x.IsRunning);
        if (runningTimeEntry == null)
        {
            throw new InvalidOperationException("Stop button should not have been available");
        }

        return runningTimeEntry;
    }

    private async Task ClickButtonTemplate(Func<Task> doWork)
    {
        ClearAlert();
        if (_isClicking)
        {
            return;
        }

        _isClicking = true;
        try
        {
            await doWork.Invoke();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ShowAlert(ex.Message);
        }
        finally
        {
            _isClicking = false;
        }

        await OnChanged.InvokeAsync();
    }

    private string ShowAlertClassName { get; set; } = "d-none";
    private string AlertContent { get; set; } = string.Empty;
    private Timer? _timer;
    public void ClearAlert()
    {
        ShowAlertClassName = "d-none";
        AlertContent = string.Empty;
    }

    public void ShowAlert(string message)
    {
        AlertContent = message;
        ShowAlertClassName = string.Empty;

        var timer = new Timer(TimeSpan.FromSeconds(30));
        timer.Elapsed += HandleTimer;
        timer.Start();
    }

    private void HandleTimer(object? sender, ElapsedEventArgs e)
    {
        ClearAlert();
        _timer?.Stop();
        _timer = null;
        StateHasChanged();
    }

}
