@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels.WorkItems
@inject IJSRuntime JsRuntime
@inject UserService UserService
@inject StandUpService StandUpService

@if (ViewModel.WorkItem == null)
{
    <div class="add-row">
        <div class="comment-box">
            <input type="text" @ref="ViewModel.TextBox" placeholder="@ViewModel.Type.PlaceholderText" @bind="WorkItemInput.TextInput" @onkeyup="AddWorkItemKeyUpAsync" />
        </div>
        <button class="add-button" @onclick="AddWorkItemAsync">Add</button>
        <div class="validation-error">@WorkItemInput.ValidationErrorMessage</div>
    </div>
}
else
{
    <div class="work-item-row">
        @if (ViewModel.WorkItem.Type == WorkItemType.Task && ViewModel.WorkItem.Parent != null)
        {
            <span class="work-item @ViewModel.WorkItem.Parent.Type.CssClass cell-link" @onclick="async () => await OpenWorkItemAsync(ViewModel.WorkItem.Parent)" title="Open D#@ViewModel.WorkItem.Parent.Id">
                <span class="work-item-id">@ViewModel.WorkItem.Parent.Id</span>
                @ViewModel.WorkItem.Parent.Title
            </span>
        }

        <span class="work-item @ViewModel.WorkItem.Type.CssClass cell-link" @onclick="async () => await OpenWorkItemAsync(ViewModel.WorkItem)" title="Open D#@ViewModel.WorkItem.Id">
            @if (ViewModel.WorkItem.AssignedTo != CurrentUser && ViewModel.WorkItem.Type == WorkItemType.Task)
            {
                <div class="avatar-cell">
                    <img src="@ViewModel.WorkItem.AssignedTo.AvatarUrl"
                    alt="@ViewModel.WorkItem.AssignedTo.DisplayName"
                    title="@ViewModel.WorkItem.AssignedTo.DisplayName" />
                </div>
            }
            @if (ViewModel.WorkItem.Parent == null || ViewModel.WorkItem.Type != WorkItemType.Task)
            {
                <label><span class="work-item-id">@ViewModel.WorkItem.Id</span>&nbsp;</label>
            }
            @ViewModel.WorkItem.Title
        </span>
    </div>

    @if (ViewModel.WorkItem.Type == WorkItemType.Task)
    {
        if (ViewModel.WorkItem.State == ScrumState.Done)
        {
            <span class="badge bg-success">✔️ Done</span>
        }
        else
        {
            if (ViewModel.WorkItem.State == ScrumState.Removed)
            {
                <span class="badge bg-success">✔ Removed</span>
            }
            else
            {
                if (ViewModel.WorkItem.State == ScrumState.ToDo)
                {
                    <span class="badge bg-danger">To Do</span>
                }
            }
        }
    }
    @*                 
    if (taskSummary.NeedsEstimate)
    {
        <span class="badge bg-danger">Needs Estimate</span>
    }
    else
    {
        if (taskSummary.TimeRemaining != null)
        {
            <span class="badge @(taskSummary.TimeRemaining > TimeSpan.Zero ? "bg-secondary" : "bg-danger")">@taskSummary.TimeRemaining.Value.TotalHours.ToNearest(0.1) h</span>
        }
    }
    *@

}

