@using CodeMonkeyProjectiles.Linq
@using Satori.AppServices.Extensions
@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels.WorkItems
@inject IJSRuntime JsRuntime
@inject UserService UserService
@inject StandUpService StandUpService

@if (ViewModel.WorkItem == null)
{
    <div class="add-row">
        <div class="comment-box">
            <input type="text" @ref="ViewModel.TextBox" placeholder="@ViewModel.Type.PlaceholderText" @bind="WorkItemInput.TextInput" @onkeyup="AddWorkItemKeyUpAsync" />
        </div>
        <button class="add-button" @onclick="AddWorkItemAsync">Add</button>
        <div class="validation-error">@WorkItemInput.ValidationErrorMessage</div>
    </div>
}
else
{
    <div class="work-item-row">
        @if (ViewModel.WorkItem.Type == WorkItemType.Task && ViewModel.WorkItem.Parent != null)
        {
            <span class="work-item @ViewModel.WorkItem.Parent.Type.CssClass cell-link" @onclick="async () => await OpenWorkItemAsync(ViewModel.WorkItem.Parent)" title="Open D#@ViewModel.WorkItem.Parent.Id">
                <span class="work-item-id">@ViewModel.WorkItem.Parent.Id</span>
                @ViewModel.WorkItem.Parent.Title
            </span>
        }

        <span class="work-item @ViewModel.WorkItem.Type.CssClass cell-link" @onclick="async () => await OpenWorkItemAsync(ViewModel.WorkItem)" title="Open D#@ViewModel.WorkItem.Id">
            @if (ViewModel.WorkItem.AssignedTo != CurrentUser && ViewModel.WorkItem.Type == WorkItemType.Task)
            {
                <div class="avatar-cell">
                    <img src="@ViewModel.WorkItem.AssignedTo.AvatarUrl"
                         alt="@ViewModel.WorkItem.AssignedTo.DisplayName"
                         title="@ViewModel.WorkItem.AssignedTo.DisplayName" />
                </div>
            }
            @if (ViewModel.WorkItem.Parent == null || ViewModel.WorkItem.Type != WorkItemType.Task)
            {
                <label><span class="work-item-id">@ViewModel.WorkItem.Id</span>&nbsp;</label>
            }
            @ViewModel.WorkItem.Title
        </span>
        @if (ViewModel.WorkItem.Type == WorkItemType.Task)
        {
            if (ViewModel.State == ScrumState.Done)
            {
                <span class="badge bg-success">✔️ Done</span>
            }
            else if (ViewModel.State == ScrumState.Removed)
            {
                <span class="badge bg-success">✔ Removed</span>
            }
            else if (ViewModel.State == ScrumState.ToDo)
            {
                <span class="badge bg-danger">To Do</span>
            }

            if (ViewModel.WorkItem.OriginalEstimate == null)
            {
                <span class="badge bg-danger">Needs Estimate</span>
            }

            if (ViewModel.TimeRemaining != null)
            {
                <span class="badge @(ViewModel.TimeRemaining > TimeSpan.Zero ? "bg-secondary" : "bg-danger")">@ViewModel.TimeRemaining.Value.TotalHours.ToNearest(0.1) h</span>
            }
        }
        @if (ViewModel.WorkItem.Parent != null)
        {
            <div class="parent-selector">
                <button type="button" title="Reassign parent D#@ViewModel.WorkItem.Parent.Id" @onclick="SetWorkItemToParentAsync"><span class="bi bi-arrow-90deg-up"></span></button>
            </div>
        }
    </div>
    @if (ViewModel.WorkItem.Type == WorkItemType.Task)
    {
        <div class="update-task-row">
            <div class="update-state">
                <span>Change State:</span>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-secondary @(ViewModel.State == ScrumState.ToDo ? "active" : "")" @onclick="() => ViewModel.SetState(ScrumState.ToDo)">To Do</button>
                    <button type="button" class="btn btn-outline-secondary @(ViewModel.State == ScrumState.InProgress ? "active" : "" )" @onclick="() => ViewModel.SetState(ScrumState.InProgress)">In Progress</button>
                    <button type="button" class="btn btn-outline-secondary @(ViewModel.State == ScrumState.Done ? "active" : "")" @onclick="() => ViewModel.SetState(ScrumState.Done)">Done</button>
                </div>
            </div>
            @if (ViewModel.State.IsIn(ScrumState.ToDo, ScrumState.InProgress))
            {
                <div class="update-remaining">
                    <span>Change Remaining:</span>
                    <input type="number" step="0.5" min="0" @bind="ViewModel.TimeRemainingInput" /><span>&nbsp;h</span>
                </div>
            }
        </div>
    }
}

