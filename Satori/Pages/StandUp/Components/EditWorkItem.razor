@using CodeMonkeyProjectiles.Linq
@using Satori.AppServices.Services
@using Satori.AppServices.ViewModels.WorkItems

@inject IJSRuntime JsRuntime
@inject UserService UserService
@inject StandUpService StandUpService
@inject WorkItemUpdateService WorkItemUpdateService

@if (ViewModel.WorkItem == null)
{
    <div class="add-row">
        <div class="comment-box">
            <input type="text" @ref="ViewModel.TextBox" placeholder="@ViewModel.Type.PlaceholderText" @bind="WorkItemInput.TextInput" @onkeyup="AddWorkItemKeyUpAsync" />
        </div>
        <button class="add-button" @onclick="AddWorkItemAsync">Add</button>
        <div class="validation-error">@WorkItemInput.ValidationErrorMessage</div>
    </div>
}
else
{
    <div class="flex-row">
        <WorkItemView WorkItem="ViewModel.WorkItem" TimeRemaining="ViewModel.TimeRemaining" Activity="Activity"></WorkItemView>
        <div class="flex-center-whitespace"></div>
        @if (ViewModel.WorkItem.Type != WorkItemType.Task)
        {
            <div class="btn-add-child @ViewModel.IsAddChildExpanded">
                <button type="button" @onclick="ToggleAddChildAsync"><span class="caret @ViewModel.IsAddChildExpanded"></span>Add Child...</button>
            </div>
        }
        @if (ViewModel.WorkItem.Parent != null)
        {
            <div class="parent-selector">
                <button type="button" class="@(!ViewModel.IsTaskMine ? "follow-button" : "")" title="Reassign parent D#@ViewModel.WorkItem.Parent.Id" @onclick="SetWorkItemToParentAsync"><span class="bi bi-arrow-90deg-up"></span></button>
            </div>
        }
    </div>

    @if (ViewModel.WorkItem.Type == WorkItemType.Task && ViewModel.IsTaskMine)
    {
        <div class="update-task-row">
            <div class="update-state">
                <span>Change State:</span>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-secondary @(ViewModel.State == ScrumState.ToDo ? "active" : "")" @onclick="() => ViewModel.SetState(ScrumState.ToDo)">To Do</button>
                    <button type="button" class="btn btn-outline-secondary @(ViewModel.State == ScrumState.InProgress ? "active" : "" )" @onclick="() => ViewModel.SetState(ScrumState.InProgress)">In Progress</button>
                    <button type="button" class="btn btn-outline-secondary @(ViewModel.State == ScrumState.Done ? "active" : "")" @onclick="() => ViewModel.SetState(ScrumState.Done)">Done</button>
                </div>
                <div class="validation-error">@ViewModel.StateValidationMessage</div>
            </div>
            @if (ViewModel.State.IsIn(ScrumState.ToDo, ScrumState.InProgress))
            {
                <div class="update-remaining">
                    <span>Change Remaining:</span>
                    <input class="number-box" type="number" step="0.1" min="0" @bind="ViewModel.TimeRemainingInput" /><span>&nbsp;h</span>
                    <div class="validation-error">@ViewModel.TimeRemainingInputValidationMessage</div>
                </div>
            }
        </div>
    }
    else if (ViewModel.WorkItem.Type != WorkItemType.Task)
    {
        <div class="add-child @ViewModel.IsAddChildExpanded">
            @foreach (var child in ViewModel.Children)
            {
                <div class="flex-row">
                    <button type="button" title="Set Work Item to D#@child.Id" @onclick="() => SetWorkItemAsync(child)">Set</button>
                    <span class="work-item @child.Type.CssClass cell-link" @onclick="async () => await OpenWorkItemAsync(child)" title="Open D#@child.Id">
                        <label><span class="work-item-id">@child.Id</span>&nbsp;</label>
                        @child.Title
                    </span>
                    @if (child.State == ScrumState.Done)
                    {
                        <span class="badge bg-success">✔️ Done</span>
                    }
                </div>
            }
            @if (ViewModel.WorkItem.Type.CanAssignToBoard)
            {
                <div class="flex-row">
                    <button type="button" title="Add New Task" @onclick="CreateTaskAsync">Create Task</button>
                    <div class="new-task-title">
                        <input type="text" placeholder="New Task Title" @bind="ViewModel.NewTaskTitleInput" @onkeyup="CreateTaskKeyUpAsync" />
                        <div class="validation-error">@ViewModel.NewTaskTitleInputValidationErrorMessage</div>
                    </div>
                    <div class="new-task-estimate">
                        <span>Remaining:</span>
                        <input class="number-box" type="number" step="0.1" min="0" @bind="ViewModel.TimeRemainingInput" @onkeyup="CreateTaskKeyUpAsync" /><span>&nbsp;h</span>
                    </div>
                </div>
            }
        </div>
    }
}

