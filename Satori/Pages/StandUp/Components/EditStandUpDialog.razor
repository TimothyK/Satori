@using Satori.AppServices.Extensions
@using Satori.AppServices.Models
@using Satori.AppServices.Services
@using Satori.Pages.StandUp.Components.ViewModels

@inject IConnectionSettingsStore ConnectionSettingsStore
@inject StandUpService StandUpService
@inject WorkItemUpdateService WorkItemUpdateService

@if(TimeEntries.Length == 0)
{
    return;
}

<div class="edit-button @AttentionRequired" @onclick="ShowDialog">
    <span class="bi bi-pencil-square"></span>
</div>

@if (!DialogVisible)
{
    return;
}

<!-- Dialogs -->
<div class="dialog-modal-background @DialogVisible">
    <div class="dialog-form">
        <div class="dialog-title">
            <span class="dialog-close" @onclick="CloseClick">&times;</span>
            Edit Time @(TimeEntries.Length == 1 ? "Entry" : "Entries")
        </div>
        <div class="dialog-body">
            <div class="alert alert-dismissible fade show hidden" role="alert">
                Error Message
            </div>
            <div>
                <table>
                    <tr>
                        @foreach (var entry in TimeEntries)
                        {
                            <td class="time-value">
                                @entry.Begin.ToString("HH:mm") 
                                to
                                @if (entry.End == null)
                                {
                                    <span class="enddate-now">now</span>
                                }
                                else
                                {
                                    @entry.End?.ToString("HH:mm")
                                }
                            </td>
                        }
                        <td><div class="date-header">@TimeEntries.First().Begin.ToString("D")</div></td>
                    </tr>
                    <tr>
                        @foreach (var entry in TimeEntries)
                        {
                            <td>
                                <div class="duration">
                                    <div class="duration-minutes">@entry.TotalTime.ToString(@"hh\:mm")</div>
                                    <div class="duration-decimal">@entry.TotalTime.TotalHours.ToNearest(0.05)</div>
                                </div>
                            </td>
                        }
                        <td>
                            <div class="activity-header">
                                <div class="activity-text">
                                    <div class="customer-name">@Project.CustomerName</div>
                                    <div class="project-name">@Project.ProjectName</div>
                                    <div class="activity-name">@Activity.ActivityName</div>
                                </div>
                                <div class="customer-logo">
                                    @if (Project.CustomerUrl != null)
                                    {
                                        <img src="@Project.CustomerUrl" alt="@Project.CustomerName" title="@Project.CustomerName" />
                                    }
                                </div>
                            </div>
                        </td>
                    </tr>
                    @foreach (var comment in Comments)
                    {
                        <tr>
                            @foreach (var entry in TimeEntries)
                            {
                                <td>
                                    <div class="comment-toggle @comment.IsActive[entry]" @onclick="() => comment.ToggleActiveAsync(entry)"></div>
                                </td>
                            }
                            <td>
                                @if (comment is WorkItemCommentViewModel workItemComment)
                                {
                                    <EditWorkItem ViewModel="workItemComment" Activity="Activity"></EditWorkItem>
                                }
                                else
                                {
                                    <div class="comment">
                                        <div class="comment-type">@comment.Type.Icon</div>
                                        <div class="comment-box"><input type="text" @ref="comment.TextBox" placeholder="@comment.Type.PlaceholderText" @bind="comment.Text"/></div>
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                </table>
                @foreach (var type in AllCommentTypes())
                {
                    <button class="btn-add-comment" @onclick="() => AddComment(type)">
                        <span class="add-button-icon">@type.Icon</span> Add @type.AddButtonLabel
                    </button>
                }
                <span class="validation-error">@CommentRequiredValidationMessage</span>
            </div>
        </div>
        <div class="dialog-buttonbar">
            <button type="button" class="btn btn-outline-primary btn-priority" @onclick="SaveClickAsync" title="Save changes">Save</button>
            <button type="button" class="btn btn-outline-secondary btn-priority" @onclick="CloseClick" title="Exit with no changes">Cancel</button>
        </div>
    </div>
</div>

