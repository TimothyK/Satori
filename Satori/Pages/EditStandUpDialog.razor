@using System.Diagnostics.CodeAnalysis
@using Satori.AppServices.Extensions
@using Satori.AppServices.ViewModels.DailyStandUps
@using Satori.Utilities

@if(TimeEntries.Length == 0)
{
    return;
}

<div class="edit-button" @onclick="ShowDialog">
    <span class="bi bi-pencil-square"></span>
</div>

<!-- Dialogs -->
<div class="dialog-modal-background @DialogVisible">
    <div class="dialog-form">
        <div class="dialog-title">
            <span class="dialog-close" @onclick="CloseClick">&times;</span>
            Edit Time @(TimeEntries.Length == 1 ? "Entry" : "Entries")
        </div>
        <div class="dialog-body">
            <div class="alert alert-dismissible fade show hidden" role="alert">
                Error Message
            </div>
            <div>
                <table>
                    <tr>
                        @foreach (var entry in TimeEntries)
                        {
                            <td class="time-value">
                                @entry.Begin.ToString("HH:mm") 
                                to
                                @if (@entry.End == null)
                                {
                                    <span class="enddate-now">now</span>
                                }
                                else
                                {
                                    @entry.End?.ToString("HH:mm")
                                }
                            </td>
                        }
                        <td><div class="date-header">@TimeEntries.First().Begin.ToString("D")</div></td>
                    </tr>
                    <tr>
                        @foreach (var entry in TimeEntries)
                        {
                            <td>
                                <div class="duration">
                                    <div class="duration-minutes">@entry.TotalTime.ToString(@"hh\:mm")</div>
                                    <div class="duration-decimal">@entry.TotalTime.TotalHours.ToNearest(0.05)</div>
                                </div>
                            </td>
                        }
                        <td>
                            <div class="activity-header">
                                <div class="activity-text">
                                    <div class="customer-name">@TimeEntries.First().ParentActivitySummary.ParentProjectSummary.CustomerName</div>
                                    <div class="project-name">@TimeEntries.First().ParentActivitySummary.ParentProjectSummary.ProjectName</div>
                                    <div class="activity-name">@TimeEntries.First().ParentActivitySummary.ActivityName</div>
                                </div>
                                <div class="customer-logo">
                                    @if (TimeEntries.First().ParentActivitySummary.ParentProjectSummary.CustomerUrl != null)
                                    {
                                        <img src="@TimeEntries.First().ParentActivitySummary.ParentProjectSummary.CustomerUrl" alt="@TimeEntries.First().ParentActivitySummary.ParentProjectSummary.CustomerName" title="@TimeEntries.First().ParentActivitySummary.ParentProjectSummary.CustomerName" />
                                    }
                                </div>
                            </div>
                        </td>
                    </tr>

                </table>
            </div>
        </div>
        <div class="dialog-buttonbar">
            <button type="button" class="btn btn-outline-primary btn-priority" @onclick="SaveClick" title="Save changes">Save</button>
            <button type="button" class="btn btn-outline-secondary btn-priority" @onclick="CloseClick" title="Exit with no changes">Cancel</button>
        </div>
    </div>
</div>

@code {
    private TimeEntry[] _timeEntries;

    [Parameter]
    public required TimeEntry[] TimeEntries
    {
        get => _timeEntries;
        [MemberNotNull(nameof(_timeEntries))]
        set => _timeEntries = value
            .Where(t => !t.Exported)
            .OrderBy(t => t.Begin)
            .ToArray();
    }

    [Parameter]
    public EventCallback OnSaved { get; set; }

    public VisibleCssClass DialogVisible { get; set; } = VisibleCssClass.Hidden;

    private void CloseClick()
    {
        DialogVisible = VisibleCssClass.Hidden;
    }

    private Task SaveClick()
    {
        //TODO: Save changes

        DialogVisible = VisibleCssClass.Hidden;
        return Task.CompletedTask;
    }

    private void ShowDialog()
    {
        DialogVisible = VisibleCssClass.Visible;
    }

}
