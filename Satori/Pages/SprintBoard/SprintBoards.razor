@page "/SprintBoards"
@using Satori.AppServices.Services
@using System.Web
@using Satori.AppServices.Models
@using Satori.AppServices.Services.Abstractions
@using Satori.AppServices.ViewModels
@using Satori.AppServices.ViewModels.WorkItems
@using Toolbelt.Blazor.HotKeys2
@attribute [StreamRendering]
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject SprintBoardService SprintBoardService
@inject ILoggerFactory LoggerFactory
@inject HotKeys HotKeys
@inject IJSRuntime JsRuntime
@inject IConnectionSettingsStore ConnectionSettingsStore
@inject IAlertService AlertService

<PageTitle>Sprint Boards - Satori</PageTitle>

<div>

    <h3>Sprint Boards
        @if (_workItems != null)
        {
            <span class="badge bg-primary" title="Active">@WorkItemActiveCount</span>
            <span class="badge bg-warning" title="In Progress">@WorkInProgressCount</span>
            <span class="badge bg-success" title="Done">@WorkItemDoneCount</span>
        }
        <PersonFilter People="_workItems?.SelectMany(wi => wi.WithPeople) ?? []" OnFilterChanged="WithFilterChangedAsync" @ref="WithPersonFilter"></PersonFilter>
        <span>
            <button class="btn-header btn-refresh @InLoading" title="Refresh (Alt+F5)" @onclick="async () => await RefreshAsync()"><span class="bi bi-refresh"></span></button>
        </span>
        <span style="float: right;">
            @if (_sprints != null && TeamSelection != null)
            {
                <span class="team-selector avatar-row">
                    @foreach (var sprint in _sprints.OrderBy(x => x.TeamName))
                    {
                        <button id="@sprint.TeamId" class='avatar-cell @TeamSelection.TeamSelectedClassName[sprint.TeamId]' @onclick='() => TeamSelection.SelectTeamAsync(sprint.TeamId)'>
                            <img src="@sprint.TeamAvatarUrl"
                            alt="@sprint.TeamName"
                            title="@sprint.TeamName @HttpUtility.HtmlEncode("\r") @sprint.Name @HttpUtility.HtmlEncode("\r") Finishes: @sprint.FinishTime.ToString("yyyy-MM-dd")" />
                        </button>
                    }
                </span>
            }
        </span>
    </h3>

</div>

@if (_sprints == null)
{
    <p><em>Loading Sprints...</em></p>
}
else
{
    if (_workItems == null || TeamSelection == null)
    {
        <p><em>Loading Work Items...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Work Item
                        <button type="button" class="btn btn-outline-primary btn-priority @PriorityAdjustment.ShowEnterModeClassName" @onclick="PriorityAdjustment.ToggleMode" title="Enter Adjust Priority Mode">Adjust <u>P</u>riority...</button>
                    </th>
                    <th>Tasks</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var workItem in _workItems.OrderBy(wi => wi.AbsolutePriority))
                {
                    <tr class="
                            work-item
                            @workItem.Type.CssClass
                            @workItem.StatusCssClass
                            @_workItemFilter[workItem]
                            @(PriorityAdjustment.WorkItemSelectedClassName[workItem.Id])
                    "
                    @onclick="e => PriorityAdjustment.SetMoveTo(workItem, e)">
                        <td class="cell-link" @onclick="() => OpenWorkItemAsync(workItem)" title="Open D#@(workItem.Id)">
                            <div style="display: flex;">
                                <div class="@workItem.StatusCssClass">
                                    <div class="work-item-id">@workItem.Id</div>
                                    <div>
                                        <button type="button" class="btn btn-outline-success btn-priority btn-priority-select @PriorityAdjustment.ShowSelectWorkItemClassName[workItem.Id]" @onclick="() => PriorityAdjustment.AddSelectedWorkItem(workItem)" title="Select this item to adjust its priority">✔️</button>
                                        <button type="button" class="btn btn-outline-danger btn-priority btn-priority-deselect @PriorityAdjustment.ShowDeselectWorkItemClassName[workItem.Id]" @onclick="() => PriorityAdjustment.RemoveSelectedWorkItem(workItem)" title="Deselect this item so its priority is not adjusted">❌</button>
                                    </div>
                                    <div class="@PriorityAdjustment.ShowEnterModeClassName.ToString()">
                                        <button type="button" class="btn-refresh-workitem btn-refresh @InLoadingWorkItem[workItem]" title="Refresh D#{@workItem.Id}" @onclick="async () => await RefreshAsync(workItem)" @onclick:stopPropagation="true"><span class="bi bi-refresh"></span></button>
                                    </div>
                                </div>
                                <div>
                                    <div style="display: flex;">
                                        @if (workItem.Sprint != null)
                                        {
                                            <div class="priority-block">
                                                <div class="avatar-cell">
                                                    <img src="@workItem.Sprint.TeamAvatarUrl"
                                                    alt="@workItem.Sprint.TeamName"/>
                                                </div>
                                                <div class="priority-number">
                                                    @workItem.SprintPriority
                                                </div>
                                            </div>
                                        }
                                        <div class="avatar-cell">
                                            <img src="@workItem.AssignedTo.AvatarUrl"
                                            alt="@workItem.AssignedTo.DisplayName"/>
                                        </div>
                                    </div>
                                    <div class="work-item-status">@workItem.StatusLabel</div>
                                    @if (!string.IsNullOrWhiteSpace(workItem.ProjectCode))
                                    {
                                        <div class="project-code">@workItem.ProjectCode</div>
                                    }
                                    @if (workItem.TargetDate.HasValue)
                                    {
                                        <div class="target-date @workItem.TargetDateCssClass">@workItem.TargetDate.Value.ToLocalTime().ToString("ddd, MMM d HH:mm")</div>
                                    }
                                    @if (workItem.Blocked)
                                    {
                                        <div class="blocked"></div>
                                    }
                                    @foreach (var tag in workItem.Tags)
                                    {
                                        <div>
                                            <span class="badge bg-secondary work-item-status">@tag</span>
                                        </div>
                                    }
                                </div>
                                <div class="workitem-title @workItem.StatusCssClass">
                                    @workItem.Title
                                </div>
                            </div>
                        </td>

                        <td>
                            @foreach (var task in workItem.Children.OrderByDescending(wi => wi.State).ThenBy(wi => wi.Id))
                            {
                                <div class="work-item @task.Type.CssClass task-status @task.StatusCssClass cell-link" @onclick="() => OpenWorkItemAsync(task)" title="Open D#@(task.Id)">
                                    <div class="avatar-cell">
                                        <img src="@task.AssignedTo.AvatarUrl"
                                        alt="@task.AssignedTo.DisplayName"
                                        title="@task.AssignedTo.DisplayName" />
                                    </div>
                                    <div>
                                        @task.Title
                                    </div>
                                    <div>
                                        @task.StatusLabel
                                    </div>
                                    @if (task.Blocked)
                                    {
                                        <div class="blocked"></div>
                                    }
                                    @foreach (var tag in task.Tags)
                                    {
                                        <div>
                                            <span class="badge bg-secondary" style="font-size:0.5rem;">@tag</span>
                                        </div>
                                    }
                                </div>
                            }
                            @foreach (var pullRequest in workItem.PullRequests
                                          .Union(workItem.Children.SelectMany(task => task.PullRequests))
                                          .OrderBy(pr => pr.Status))
                            {
                               <PullRequestView PullRequest="@pullRequest"></PullRequestView>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<!-- Dialogs -->
<div class="dialog dialog-adjust-priority @PriorityAdjustment.ShowExitModeClassName">
    <div class="dialog-title">
        <span class="dialog-close" @onclick="PriorityAdjustment.ToggleMode">&times;</span>
        Adjust Priority
    </div>
    <div class="dialog-body">
        <div>Selected Items:
            <span class="badge bg-primary">@PriorityAdjustment.SelectedWorkItemsCount</span>
            <ul style="font-size: 0.9em;">
                @foreach (var workItem in PriorityAdjustment.SelectedWorkItems.OrderBy(wi => wi.AbsolutePriority).Take(3))
                {
                    <li>
                        <div style="display: flex;">
                            <div class="priority-block">
                                <div class="avatar-cell">
                                    <img src="@workItem.Sprint?.TeamAvatarUrl"
                                    alt="@workItem.Sprint?.TeamName"/>
                                </div>
                                <div class="priority-number">
                                    @workItem.SprintPriority
                                </div>
                            </div>
                            <div>&nbsp;D#@workItem.Id @workItem.Title</div>
                            <div>
                                <button type="button" class="btn btn-outline-danger" style="font-size: 0.75em; margin-left: 5px; padding: 2px;" @onclick="() => PriorityAdjustment.RemoveSelectedWorkItem(workItem)">❌</button>
                            </div>
                        </div>
                    </li>
                }
                @if (PriorityAdjustment.SelectedWorkItems.Count > 3)
                {
                    <li>...and @(PriorityAdjustment.SelectedWorkItems.Count - 3) more.</li>
                }
            </ul>
            <p style="font-size: 0.8em; font-style: italic;">Use the check button on the left of each work item to select it to be moved.</p>
        </div>
        <div>
            <div style="display: flex;">
                <span>Move To:</span>
                <label class="switch" style="margin: 0px 5px 0px;">
                    <input type="checkbox" checked="@(PriorityAdjustment.TargetRelation == RelativePosition.Below)" @oninput="PriorityAdjustment.ToggleMoveBelow">
                    <span class="slider round"></span>
                </label>
                <span style="font-weight: bold">@PriorityAdjustment.MoveToLabel</span>
            </div>
            @if (PriorityAdjustment.Target != null)
            {
                <ul style="font-size: 0.9em;">
                    <li>
                        <div style="display: flex;">
                            <div class="priority-block">
                                <div class="avatar-cell">
                                    <img src="@PriorityAdjustment.Target.Sprint?.TeamAvatarUrl"
                                    alt="@PriorityAdjustment.Target.Sprint?.TeamName"/>
                                </div>
                                <div class="priority-number">
                                    @PriorityAdjustment.Target.SprintPriority
                                </div>
                            </div>
                            <div>&nbsp;D#@PriorityAdjustment.Target.Id @PriorityAdjustment.Target.Title</div>
                            <div>
                                <button type="button" class="btn btn-outline-danger" style="font-size: 0.75em; margin-left: 5px; padding: 2px;" @onclick="PriorityAdjustment.ClearMoveTo">❌</button>
                            </div>
                        </div>
                    </li>
                </ul>
            }
            <p style="font-size: 0.8em; font-style: italic;">
                Click a row to set target position, or remove the selected row to move to the top or bottom.
            </p>
        </div>
    </div>
    <div class="dialog-buttonbar">
        <button type="button" class="btn btn-outline-primary btn-priority" @onclick="MovePriorityAsync" title="Move selected items to the new position">Move</button>
        <button type="button" class="btn btn-outline-secondary btn-priority" @onclick="PriorityAdjustment.ToggleMode" title="Exit Adjust Priority Mode with no changes">Cancel</button>
    </div>
</div>

